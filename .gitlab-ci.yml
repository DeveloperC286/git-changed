stages:
  - clean-git-history-checking
  - conventional-commits-linting
  - conventional-commits-next-version-checking
  - formatting
  - linting
  - module-tidying
  - compiling
  - releasing
  - release-binary-compiling


services:
  - docker:dind


variables:
  SEMANTIC_VERSIONING_REGEX: "[0-9][0-9]*[.][0-9][0-9]*[.][0-9][0-9]*"
  DOCKER_HOST: tcp://docker:2375
  EARTHLY_EXEC_CMD: "/bin/sh"


image: earthly/earthly:v0.6.22


clean-git-history-checking:
  stage: clean-git-history-checking
  script:
    - earthly --ci +clean-git-history-checking --from_reference "origin/${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}"
  rules:
    - if: $CI_MERGE_REQUEST_ID


conventional-commits-linting:
  stage: conventional-commits-linting
  script:
    - earthly --ci +conventional-commits-linting --from_reference "origin/${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}"
  rules:
    - if: $CI_MERGE_REQUEST_ID


conventional-commits-next-version-checking:
  stage: conventional-commits-next-version-checking
  script:
    - earthly --ci +conventional-commits-next-version-checking
  rules:
    - if: $CI_MERGE_REQUEST_ID


formatting:
  stage: formatting
  script:
    - earthly --ci +check-formatting
  rules:
    - if: $CI_MERGE_REQUEST_ID


linting:
  stage: linting
  script:
    - earthly --ci +linting
  rules:
    - if: $CI_MERGE_REQUEST_ID


module-tidying:
  stage: module-tidying
  script:
    - earthly --ci +check-module-tidying
  rules:
    - if: $CI_MERGE_REQUEST_ID


compiling:
  stage: compiling
  script:
    - earthly --ci +compiling-linux-amd64
  rules:
    - if: $CI_MERGE_REQUEST_ID
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH


releasing:
  stage: releasing
  image: rust
  script:
    # Get current version and assert it matches SEMANTIC_VERSIONING_REGEX.
    - current_version=$(cat VERSION)
    - echo "${current_version}" | grep -q "^${SEMANTIC_VERSIONING_REGEX}$"
    # If the tag already exist then exit.
    - new_tag=${current_version}
    - git tag -l | grep -q "^${new_tag}$" && exit 0
    # Get latest tag.
    - latest_tag=$(git tag --sort=-committerdate | head -1)
    # Generate the release description.
    - release_description=$(git log --format="* %s" ${latest_tag}.. --no-merges)
    # Install GitlabCI cli releasing tool.
    - curl --location --output /usr/local/bin/release-cli "https://release-cli-downloads.s3.amazonaws.com/latest/release-cli-linux-amd64"
    - chmod +x /usr/local/bin/release-cli
    # Create the new release.
    - /usr/local/bin/release-cli create
      --name "${new_tag}"
      --description "${release_description}"
      --tag-name "${new_tag}"
      --ref "${CI_COMMIT_SHA}"
      --assets-link '{"name":"linux-amd64-binary.zip","url":"https://gitlab.com/DeveloperC/git-changed/-/jobs/artifacts/'${new_tag}'/download?job=release-binary-compiling-linux-amd64"}'
      --assets-link '{"name":"darwin-amd64-binary.zip","url":"https://gitlab.com/DeveloperC/git-changed/-/jobs/artifacts/'${new_tag}'/download?job=release-binary-compiling-darwin-amd64"}'
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH


release-binary-compiling-linux-amd64:
  stage: release-binary-compiling
  script:
    - earthly --ci +compiling-linux-amd64
  artifacts:
    paths:
      - git-changed
  rules:
    - if: $CI_COMMIT_TAG


release-binary-compiling-darwin-amd64:
  stage: release-binary-compiling
  script:
    - earthly --ci +compiling-linux-amd64
  artifacts:
    paths:
      - git-changed
  rules:
    - if: $CI_COMMIT_TAG
